{
  // ********************************************************
  // javascript, javascriptreact, typescript, typescriptreact
  // ********************************************************

  // ts
  "Typescript type checking": {
    "prefix": "ts-check",
    "body": ["// @ts-check"],
    "description": "Typescript type checking",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "Typescript type ignoring": {
    "prefix": "ts-ignore",
    "body": ["// @ts-ignore"],
    "description": "Typescript type ignoring",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  // eslint
  "ESLint disable block": {
    "prefix": "eslintdisableblock",
    "body": [
      "/* eslint-disable ${1:rule-one, rule-two} */",
      "${3:// your unlinted code goes here}",
      "/* eslint-enable ${1:rule-one, rule-two} */"
    ],
    "description": "ESLint disable block",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "ESLint disable selection": {
    "prefix": "eslintdisableselection",
    "body": [
      "/* eslint-disable ${1:rule-one, rule-two} */",
      "${TM_SELECTED_TEXT}",
      "/* eslint-enable ${1:rule-one, rule-two} */"
    ],
    "description": "ESLint disable selection",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "ESLint disable file": {
    "prefix": "eslintdisablefile",
    "body": ["/* eslint-disable */"],
    "description": "ESLint disable file",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "ESLint disable line": {
    "prefix": "eslintdisableline",
    "body": ["// eslint-disable-line ${1:rule-one, rule-two}"],
    "description": "ESLint disable line",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "ESLint disable next line": {
    "prefix": "eslintdisablenextline",
    "body": ["// eslint-disable-next-line ${1:rule-one, rule-two}"],
    "description": "ESLint disable next line",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  // jest
  "Jest - describe": {
    "prefix": "jest-describe",
    "body": ["describe('${1:descriptor}', () => {", "  ${2:content}", "});"],
    "description": "Jest - describe",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "Jest - it": {
    "prefix": "jest-it",
    "body": [
      "it('${1:Test description}', () => {",
      "  expect(${2:Expresion}).toBe(${3:Result});",
      "});"
    ],
    "description": "Jest - it",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "Jest - test": {
    "prefix": "jest-test",
    "body": [
      "test('${1:Test description}', () => {",
      "  expect(${2:Expresion}).toBe(${3:Result});",
      "});"
    ],
    "description": "Jest - test",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  // express
  "Express - method": {
    "prefix": "express-method",
    "body": [
      "app.${1:method}(\"/\", (req, res, next) => {",
      "  ${2:// make some cool stuff here}",
      "});"
    ],
    "description": "Express method",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  // react
  "Use state hook": {
    "prefix": "react-usestate",
    "body": ["const [${1:name}, set${2:Name}] = useState(${3:value});"],
    "description": "Use state hook",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },

  "React - Component statefull": {
    "prefix": "react-componentstateful",
    "body": [
      "import React, { Component } from \"react\";",
      "",
      "interface I${1:ComponentName}Props {}",
      "",
      "interface I${1:ComponentName}State {}",
      "",
      "class ${1:ComponentName} extends Component<I${1:ComponentName}Props, I${1:ComponentName}State> {",
      "  state = {};",
      "",
      "  render() {",
      "    return;",
      "  }",
      "}",
      "",
      "export default ${1:ComponentName};",
      ""
    ],
    "description": "React - Component statefull"
  },

  "React - Component functional": {
    "prefix": "react-componentfunctional",
    "body": [
      "import React from \"react\";",
      "",
      "interface I${1:ComponentName}Props {}",
      "",
      "const ${1:ComponentName}: React.SFC<I${1:ComponentName}Props> = () => (",
      "  ",
      ");",
      "",
      "export default ${1:ComponentName};",
      ""
    ],
    "description": "React - Component functional"
  },

  // others
  "Log / warning / error to console": {
    "prefix": "log",
    "body": ["console.${1|log,warning,dir,table,error|}($2);"],
    "description": "Log output to console",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  }
}
